//Array of the Javascript files to analyse
var ownTests = ['example.js', 'example1.js', 'example2.js', 'example3.js', 'example4.js', 'example5.js', 
    'example6.js', 'example7.js', 'example8.js', 'example9.js', 'example10.js'];
var commanderTests = ['test.arguments.js','test.command.action.js','test.command.allowUnknownOption.js','test.command.help.js',
    'test.literal.args.js','test.options.args.optional.given.js','test.options.args.optional.js','test.options.args.required.js',
    'test.options.bool.js','test.options.bool.no.js','test.options.bool.small.combined.js','test.options.bool.small.js','test.options.camelcase.js',
    'test.options.cflags.js','test.options.coercion.js','test.options.defaults.given.js','test.options.defaults.js',
    'test.options.equals.js','test.options.func.js','test.options.hyphen.js','test.options.large-only.js','test.options.large-only-with-value.js',
    'test.options.regex.js','test.variadic.args.js'];
var lodashTest = ['test.js'];
var underscoreTests = ['arrays.js','chaining.js','collections.js','cross-document.js','functions.js','objects.js','utility'];


//The version of the analysis to execute
var analysis = 'analysisV7-b.js';
//The name of the merged outputs for all tests
var outputFile = 'output.log';

//template of the command to execute jalangi-analysis (without file to test at the end)
var jalangiCommand = 'node jalangi2/src/js/commands/jalangi.js --inlineIID --inlineSource --analysis ' + analysis + ' ';
var directCommand = 'node jalangi2/src/js/commands/direct.js --analysis ' + analysis;

var ownTestCommand =  jalangiCommand;
var commanderTestCommand = directCommand + ' libraries/commander.js-master/test/';
var lodashTestCommand = directCommand + ' libraries/lodash-master/test/';
var underscoreTestCommand = directCommand + ' libraries/underscore-master/test/';

//execute analysis synchrounous to merge the outputs
var execSync = require('exec-sync');
var fs = require('fs');

//is there a built in function similar to toString() for arrays???
var Output = {
    list: [],
    push: function(s) {
        Output.list.push(s);
    },
    toString: function() {
        var result = "";
        for (i in Output.list) {
            result = result + Output.list[i];
        }
        return result;
    }
};

function test(tests, command, withRemove) {
	for (i in tests) {
        var test = tests[i];
        console.log("analyse " + test);
        execSync(command + test);
        var result = fs.readFileSync("result.txt");
        Output.push("results for " + test + ":");
        Output.push(result + "\n\n");
        console.log("\tfinished");

		if (withRemove) {
			//remove temporary files generated by jalangi
		    execSync("rm " + test.split(".")[0] + "_*");
		}
    }
}

//sandbox for main execution
(function execute() {
    //ownTests
	Output.push("Testing own tests:\n");
	console.log("Testing own tests:");
	test(ownTests, ownTestCommand, true);
	
	//test library commander
	Output.push("\n\nTesting commander (Due to different Tests on the same library the results have to be merged):\n");
	console.log("\n\nTesting commander:");
	test(commanderTests, commanderTestCommand, false);
    
	//test library lodash
	Output.push("\n\nTesting lodash:\n");
	console.log("\n\nTesting lodash (may take some time):");
	test(lodashTest, lodashTestCommand, false);
	
	//test library underscore
	Output.push("\n\nTesting underscore (Due to different Tests on the same library the results have to be merged):\n");
	console.log("\n\nTesting underscore:");
	test(underscoreTests, underscoreTestCommand, false);

    console.log("writing results to " + outputFile);
    fs.writeFileSync(outputFile, Output.toString());
})();
